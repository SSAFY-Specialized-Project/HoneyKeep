version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - my-network
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  mongodb:
    image: mongo:6
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "mongosh", "-u", "${MONGO_INITDB_ROOT_USERNAME}", "-p", "${MONGO_INITDB_ROOT_PASSWORD}", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: springboot-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - my-network
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}

      # PostgreSQL
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # MongoDB
      SPRING_DATA_MONGODB_URI: ${SPRING_DATA_MONGODB_URI}

      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE_SEC: ${JWT_EXPIRE_SEC}
      JWT_REFRESH_EXPIRE_SEC: ${JWT_REFRESH_EXPIRE_SEC}

      SECRET_KEY: ${SECRET_KEY}

      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}

      SSAFY_FINANCIAL_NETWORK_API_KEY: ${SSAFY_FINANCIAL_NETWORK_API_KEY}

      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}

      ML_SERVICE_URL: http://ml-service:5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ml-service:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: ml-service
    ports:
      - "5000:5000"
    volumes:
      - ./ml/model:/app/model
    networks:
      - my-network
    environment:
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s  # 시간 늘림
      timeout: 10s   # 시간 늘림
      retries: 3
      start_period: 20s  # 시작 지연 시간 추가

networks:
  my-network:
    name: my-network
    external: true
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  mongo-data:
