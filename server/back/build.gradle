plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}


group = 'com.barcode'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url = uri("https://jitpack.io") }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.github.cdimascio:dotenv-java:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'org.jsoup:jsoup:1.15.3'

    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

    // WebAuthn 라이브러리
    implementation 'com.yubico:webauthn-server-core:2.6.0'
    implementation 'com.yubico:webauthn-server-attestation:2.6.0'

    // Rate limiting with Bucket4j
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-redis:7.6.0'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-jcache:7.6.0'
    implementation 'org.redisson:redisson:3.23.4'
    implementation 'javax.cache:cache-api:1.1.1'

    implementation("io.jsonwebtoken:jjwt-api:0.11.5")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.5")

    // Jackson 라이브러리
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.3'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    //runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers:3.4.0'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:mongodb:1.19.3'
    testImplementation 'org.testcontainers:postgresql:1.19.3'
    testImplementation 'io.rest-assured:rest-assured:5.5.1'

    //testImplementation 'org.testcontainers:mysql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

test {
    useJUnitPlatform()
    systemProperty 'spring.main.banner-mode', 'off'
    
    // 테스트 환경설정: 테스트 폴더만 컨텍스트로 실행
    systemProperty 'spring.test.context.cache.maxSize', '1'
    systemProperty 'spring.main.lazy-initialization', 'true'
    systemProperty 'spring.profiles.active', 'test'
    
    // 테스트 클래스 패턴 지정 (선택 사항)
    // include 'com/barcode/honeykeep/**/*Test.class'
    
    // 모든 테스트 클래스 포함 (Test와 Tests로 끝나는 모든 클래스)
    include '**/*Test*.class'
    
    // 테스트 실행 시 테스트 데이터 출력
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}
